## RPG con Patrones de Dise√±o (Command y Chain of Responsibility) ‚öîÔ∏è

### üë• Integrantes

- **Bettsy Liliana Garces Buritica** ‚Äì C√≥digo estudiantil: 20231020222 
- **Diego Felipe Barreto Rubiano** ‚Äì C√≥digo estudiantil: 20221020151  
- **Martin Zuluaga Carre√±o** ‚Äì C√≥digo estudiantil: 20242020252

---

- **Lenguaje:** Python üêç
- **Bibliotecas:** `pygame`, `abc`, `typing`, `enum`
- **Descripci√≥n:** Este proyecto implementa una batalla de RPG simple, centrada en la aplicaci√≥n rigurosa de dos patrones de dise√±o clave para manejar las acciones del jugador y la validaci√≥n de estados:

1.  **Patr√≥n Command (Comando):**
    * Cada acci√≥n del juego (Atacar, Defender, Curar) se encapsula como un objeto de comando (`AttackCommand`, `DefendCommand`, `HealCommand`).
    * Esto permite **desacoplar** la acci√≥n de quien la ejecuta y de quien la invoca, logrando que el `GameController` pueda gestionar y almacenar comandos f√°cilmente.
    * Se incluye una funci√≥n `undo()` en cada comando, lo que implementa la capacidad de **Deshacer** la √∫ltima acci√≥n, una caracter√≠stica poderosa de este patr√≥n.

2.  **Patr√≥n Chain of Responsibility (Cadena de Responsabilidad):**
    * Se establece una cadena de manejadores (`AliveCheckHandler`, `ResourceCheckHandler`, `ExecutionHandler`) para validar y procesar cada comando antes de su ejecuci√≥n.
    * Esto garantiza que las comprobaciones de estado (como verificar si el personaje est√° vivo o si tiene pociones) se realicen de manera modular y **extensible** (Principio Abierto/Cerrado).

El dise√±o sigue los principios **SOLID** para asegurar un c√≥digo robusto, f√°cil de mantener y de extender.

- **Ejecuci√≥n:** El proyecto se ejecuta directamente desde el archivo principal:

```bash
python main.py
