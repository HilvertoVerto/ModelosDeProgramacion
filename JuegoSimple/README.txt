# ‚öîÔ∏è RPG T√°ctico con Patrones de Dise√±o

## Implementaci√≥n de Patrones Command y Chain of Responsibility

Este proyecto es una simulaci√≥n simple de un juego de rol (RPG) por turnos en Python con Pygame. El objetivo principal es la aplicaci√≥n rigurosa de los patrones de dise√±o **Command** y **Chain of Responsibility**, buscando una alta adherencia a los principios **SOLID**.

---

## üèóÔ∏è Arquitectura y Principios de Dise√±o

La estructura del c√≥digo busca el **desacoplamiento** total entre acciones, validaciones y la interfaz.

### 1. Patr√≥n Command: Encapsulaci√≥n de Acciones

El patr√≥n Command permite la creaci√≥n de un sistema de historial y la funcionalidad de **deshacer (Undo)**.

- **Command (Interfaz):** Define la interfaz com√∫n para todas las acciones (`execute()` y `undo()`). (Principio de Segregaci√≥n de Interfaces).
- **Comandos Concretos:** Clases como `AttackCommand`, `DefendCommand` y `HealCommand` que encapsulan una acci√≥n, sus datos y la l√≥gica para revertirla. (Principio de Responsabilidad √önica - SRP).
- **GameController:** Act√∫a como el **Invocador**. Almacena la historia de comandos.

### 2. Patr√≥n Chain of Responsibility: Gesti√≥n de Validaciones

Este patr√≥n desacopla las validaciones de la l√≥gica de negocio, haciendo el sistema f√°cilmente extensible.

- **Handler (Interfaz):** Define la estructura de la cadena (`handle()`) y el m√©todo para enlazar al siguiente handler (`set_next()`).
- **Handlers Concretos:**
    - **AliveCheckHandler:** Verifica si los personajes involucrados est√°n vivos.
    - **ResourceCheckHandler:** Verifica precondiciones como tener pociones o no estar al m√°ximo de HP.
    - **ExecutionHandler:** El √∫ltimo eslab√≥n; ejecuta el comando si todas las validaciones previas pasaron.
- **Ventaja de Dise√±o:** La Cadena se puede extender para a√±adir nuevas reglas de validaci√≥n sin modificar los handlers existentes o el controlador. (Principio Abierto/Cerrado - OCP).

### 3. Principios SOLID Adicionales

- **Inversi√≥n de Dependencias (DIP):** El `GameController` depende de las abstracciones (`Command` y `Handler`), no de sus implementaciones concretas.
- **Responsabilidad √önica (SRP):** `GameView` se encarga solo de la UI, separada de la l√≥gica de juego.

---

## üöÄ Puesta en Marcha

### Requisitos

El proyecto requiere la librer√≠a `pygame`.

    pip install pygame

### Ejecuci√≥n

1.  Guarde el c√≥digo fuente como `rpg_patterns.py`.
2.  Ejecute el archivo desde la l√≠nea de comandos:

    python rpg_patterns.py

---

## üéÆ Controles de Juego

Las acciones del jugador se mapean directamente a la ejecuci√≥n de un objeto Command.

- **Q - AttackCommand:** Inflige da√±o al enemigo.
- **W - DefendCommand:** Otorga una bonificaci√≥n de defensa temporal.
- **E - HealCommand:** Restaura HP, consume 1 poci√≥n. Validado por la Cadena de Responsabilidad.
- **R - Deshacer:** Revierte el efecto de la √∫ltima acci√≥n del jugador, utilizando la capacidad de `undo()` del patr√≥n Command.
